var searchIndex = JSON.parse('{\
"rivulet":{"doc":"Rivulet is a library for creating asynchronous pipelines …","t":[0,0,0,0,0,0,0,3,3,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,16,16,8,8,8,8,3,11,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,10,10,11,11,11,11,11,11,11,10,11,11,10,11,16,3,16,3,8,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,11,11,11,11,11,11,11,11,10,11,10,11],"n":["circular_buffer","error","io","lazy","slice","splittable","view","Sink","Source","borrow","borrow","borrow_mut","borrow_mut","circular_buffer","compare_set_head","drop","drop","from","from","into","into","poll_available","poll_grant","release","set_head","set_reader_waker","try_from","try_from","try_into","try_into","type_id","type_id","view","view","view_mut","view_mut","0","GrantOverflow","borrow","borrow_mut","clone","clone_into","fmt","fmt","from","into","source","to_owned","to_string","try_from","try_into","type_id","AsyncReader","AsyncWriter","Reader","Writer","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","consume","consume","fill_buf","flush","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","into","into_inner","into_inner","into_inner","into_inner","new","new","new","new","poll_close","poll_fill_buf","poll_flush","poll_read","poll_write","read","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","write","Lazy","LazyChannelSink","LazyChannelSource","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","fmt","from","from","from","hash","into","into","into","into_inner","lazy_channel","new","new_boxed","poll_grant","poll_grant","poll_grant","release","release","release","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","view","view","view","view_mut","view_mut","view_mut","Slice","SliceMut","borrow","borrow","borrow_mut","borrow_mut","compare_set_head","compare_set_head","from","from","into","into","into_inner","into_inner","new","new","poll_available","poll_available","set_head","set_head","set_reader_waker","set_reader_waker","try_from","try_from","try_into","try_into","type_id","type_id","view","view","view_mut","Cloneable","Error","Item","Splittable","SplittableImpl","SplittableImplMut","SplittableMut","View","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","compare_set_head","drop","from","from","into","into","into_cloneable_view","into_view","poll_available","poll_grant","poll_grant","release","release","set_head","set_reader_waker","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","view","view","view","view_mut","view_mut","Error","Grant","Item","MapError","View","ViewMut","blocking_grant","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","fmt","from","from","grant","hash","into","into","into_future","into_inner","map_error","poll","poll_grant","poll_grant","release","release","to_owned","try_from","try_from","try_into","try_into","try_poll","type_id","type_id","view","view","view_mut","view_mut"],"q":["rivulet","","","","","","","rivulet::circular_buffer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rivulet::error","","","","","","","","","","","","","","","","rivulet::io","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rivulet::lazy","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rivulet::slice","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rivulet::splittable","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rivulet::view","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["An asynchronous copy-free circular buffer.","Errors produced by streams.","Utilities for working with <code>std::io</code>.","Lazy-initialized streams.","Utilities for working with slices.","Streams that can be split into multiple views.","Views into asynchronous streams.","The writer of a circular buffer.","The reader of a circular buffer.","","","","","Create a circular buffer that can hold at least <code>min_size</code> …","","","","","","","","","","","","","","","","","","","","","","","","Error produced when a request is too large to grant.","","","","","","","","","","","","","","","Implements <code>futures::io::AsyncRead</code> for a <code>View</code>.","Implements <code>futures::io::AsyncWrite</code> for a <code>ViewMut</code>.","Implements <code>std::io::Read</code> for a <code>View</code>.","Implements <code>std::io::Write</code> for a <code>ViewMut</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return the original <code>View</code>","Return the original <code>View</code>","Return the original <code>ViewMut</code>","Return the original <code>ViewMut</code>","Create a new <code>Reader</code>","Create a new <code>AsyncReader</code>","Create a new <code>Writer</code>","Create a new <code>AsyncWriter</code>","","","","","","","","","","","","","","","","","","","","","","","","A lazy-initialized view.","A sink created by <code>lazy_channel</code>.","A source created by <code>lazy_channel</code>.","","","","","","","","","","","","","","","","","Return the inner type, if it has been initialized.","Create a lazy-initialized channel.","Create a new lazy view.","Create a new lazy view with a boxed initialization …","","","","","","","","","","","","","","","","","","","","","","","Treats a slice as a stream.","Treats a mutable slice as a stream.","","","","","","","","","","","Return the original slice.","Return the original slice.","Create a stream from a slice.","Create a stream from a slice.","","","","","","","","","","","","","","","","A view returned by <code>Splittable::into_cloneable_view</code>.","The error produced by <code>poll_available</code>.","The streamed type.","A view that can be split for use with multiple readers.","The implementation behind <code>Splittable</code>.","The implementation behind <code>SplittableMut</code>.","A mutable view that can be split for use with multiple …","A view returned by <code>Splittable::into_view</code>.","","","","","","","Set the earliest position retained in the stream.","","","","","","Create a view that implements <code>Clone</code>.","Create a view for a single reader.","Suspends the current task until <code>len</code> samples starting at …","","","","","Set the earliest position retained in the stream.","Set the reader waking function.","","","","","","","","Obtain a view into the stream.","","","Obtain a mutable view into the stream.","","The error produced by <code>poll_grant</code>.","Future produced by <code>View::grant</code>.","The streamed type.","An error-mapped view produced by <code>View::map_error</code>.","Obtain views into asynchronous contiguous-memory streams.","Obtain mutable views into asynchronous contiguous-memory …","Obtains a view of at least <code>count</code> elements, blocking the …","","","","","","","","","","Create a future that obtains a view of at least <code>count</code> …","","","","","Return the original view.","Maps this view to a new view producing error <code>E</code>.","","Attempt to obtain a view of at least <code>count</code> elements.","","Attempt to advance past the first <code>count</code> elements in the …","","","","","","","","","","Obtain the current view of the stream.","","Obtain the current mutable view of the stream.",""],"i":[0,0,0,0,0,0,0,0,0,1,2,1,2,0,2,1,2,1,2,1,2,2,1,1,2,2,1,2,1,2,1,2,1,2,1,2,3,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,4,5,6,7,4,5,6,7,4,5,6,7,4,5,6,7,4,5,4,6,4,5,6,7,4,5,6,7,4,5,6,7,4,5,6,7,4,5,6,7,7,5,7,5,7,4,4,5,6,7,4,5,6,7,4,5,6,7,4,5,6,7,6,0,0,0,8,9,10,8,9,10,8,8,8,8,9,10,8,8,9,10,8,0,8,8,8,9,10,8,9,10,8,8,9,10,8,9,10,8,9,10,8,9,10,8,9,10,0,0,11,12,11,12,11,12,11,12,11,12,11,12,11,12,11,12,11,12,11,12,11,12,11,12,11,12,11,12,12,0,13,13,0,0,0,0,0,14,15,14,15,15,15,13,15,14,15,14,15,16,16,13,14,15,14,15,13,13,15,14,15,14,15,14,15,13,14,15,17,14,18,0,18,0,0,0,18,19,20,19,20,20,20,20,19,20,18,20,19,20,19,20,18,19,18,20,18,20,20,19,20,19,20,19,19,20,18,20,21,20],"f":[null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[["usize",15]]],[[["u64",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["pin",3],["context",3],["u64",15],["usize",15]],["poll",4,[["result",4,[["usize",15]]]]]],[[["pin",3],["context",3],["usize",15]],["poll",4,[["result",4,[["grantoverflow",3]]]]]],[[["usize",15]]],[[["u64",15]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[["u64",15],["usize",15]]],[[]],[[["u64",15],["usize",15]]],null,null,[[]],[[]],[[],["grantoverflow",3]],[[]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["option",4,[["error",8]]]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["reader",3]],[[],["asyncreader",3]],[[],["writer",3]],[[],["asyncwriter",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["pin",3],["usize",15]]],[[],["result",6]],[[],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["pin",3],["context",3]],["poll",4,[["result",6]]]],[[["pin",3],["context",3]],["poll",4,[["result",6]]]],[[["pin",3],["context",3]],["poll",4,[["result",6]]]],[[["pin",3],["context",3]],["poll",4,[["result",6,[["usize",15]]]]]],[[["pin",3],["context",3]],["poll",4,[["result",6,[["usize",15]]]]]],[[],["result",6,[["usize",15]]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["result",6,[["usize",15]]]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["lazy",3]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[["",26],["",26]]],[[]],[[]],[[["pin",3],["context",3],["usize",15]],["poll",4,[["result",4]]]],[[["pin",3],["context",3],["usize",15]],["poll",4,[["result",4]]]],[[["pin",3],["context",3],["usize",15]],["poll",4,[["result",4]]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[["u64",15]]],[[["u64",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["pin",3],["context",3],["u64",15],["usize",15]],["poll",4,[["result",4,[["usize",15]]]]]],[[["pin",3],["context",3],["u64",15],["usize",15]],["poll",4,[["result",4,[["usize",15]]]]]],[[["u64",15]]],[[["u64",15]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["u64",15],["usize",15]]],[[["u64",15],["usize",15]]],[[["u64",15],["usize",15]]],null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[["u64",15]]],[[]],[[]],[[]],[[]],[[]],[[],["cloneable",3,[["",26]]]],[[],["view",3,[["",26]]]],[[["pin",3],["context",3],["u64",15],["usize",15]],["poll",4,[["result",4,[["usize",15]]]]]],[[["pin",3],["context",3],["usize",15]],["poll",4,[["result",4]]]],[[["pin",3],["context",3],["usize",15]],["poll",4,[["result",4]]]],[[["usize",15]]],[[["usize",15]]],[[["u64",15]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["u64",15],["usize",15]]],[[]],[[]],[[["u64",15],["usize",15]]],[[]],null,null,null,null,null,null,[[["usize",15]],["result",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[["usize",15]],["grant",3]],[[]],[[]],[[]],[[]],[[]],[[["",26],["",26]],["maperror",3,[["",26],["",26],["",26],["",26],["",26]]]],[[["pin",3],["context",3]],["poll",4]],[[["pin",3],["context",3],["usize",15]],["poll",4,[["result",4]]]],[[["pin",3],["context",3],["usize",15]],["poll",4,[["result",4]]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["pin",3],["context",3]],["poll",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]]],"p":[[3,"Sink"],[3,"Source"],[3,"GrantOverflow"],[3,"Reader"],[3,"AsyncReader"],[3,"Writer"],[3,"AsyncWriter"],[3,"Lazy"],[3,"LazyChannelSink"],[3,"LazyChannelSource"],[3,"Slice"],[3,"SliceMut"],[8,"SplittableImpl"],[3,"View"],[3,"Cloneable"],[8,"Splittable"],[8,"SplittableImplMut"],[8,"View"],[3,"Grant"],[3,"MapError"],[8,"ViewMut"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};