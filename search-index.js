var searchIndex = JSON.parse('{\
"rivulet":{"doc":"Rivulet provides tools for creating and processing …","i":[[0,"buffer","rivulet","Asynchronous buffers for temporarily caching data.",null,null],[0,"circular_buffer","rivulet::buffer","Async circular buffers.",null,null],[0,"spmc","rivulet::buffer::circular_buffer","A single-producer, multiple-consumer async circular …",null,null],[5,"buffer","rivulet::buffer::circular_buffer::spmc","Creates a single-producer, multiple-consumer async …",null,[[["usize",15]]]],[3,"BufferSink","","Write values to the associated <code>BufferSource</code>s.",null,null],[3,"BufferSource","","Read values from the associated <code>BufferSink</code>.",null,null],[0,"spsc","rivulet::buffer::circular_buffer","A single-producer, single-consumer async circular buffer.",null,null],[5,"buffer","rivulet::buffer::circular_buffer::spsc","Creates a single-producer, single-consumer async circular …",null,[[["usize",15]]]],[3,"BufferSink","","Write values to the associated <code>BufferSource</code>.",null,null],[3,"BufferSource","","Read values from the associated <code>BufferSink</code>.",null,null],[0,"io","rivulet","Utilities for working with [<code>std::io</code>].",null,null],[3,"Reader","rivulet::io","Implements <code>std::io::Read</code> for a source.",null,null],[11,"new","","Create a new <code>Reader</code>",0,[[]]],[11,"into_inner","","Return the original <code>Source</code>",0,[[]]],[4,"Error","rivulet","An error produced when polling a <code>Sink</code> or <code>Source</code>.",null,null],[13,"Closed","","The stream is closed and cannot be accessed.",1,null],[13,"Overflow","","The request is malformed and results in a buffer overflow.",1,null],[13,"IO","","An I/O error occurred.",1,null],[3,"Reserve","","Future produced by [<code>Sink::reserve</code>].",null,null],[3,"Commit","","Future produced by [<code>Sink::commit</code>].",null,null],[3,"Request","","Future produced by [<code>Source::request</code>].",null,null],[3,"Consume","","Future produced by [<code>Source::consume</code>].",null,null],[8,"Sink","","Interface for asynchronous contiguous-memory sinks.",null,null],[16,"Item","","The type to be written.",2,null],[10,"sink","","The mutable buffer for writing data.",2,[[]]],[10,"poll_reserve","","Attempt to reserve at least <code>count</code> elements in the …",2,[[["pin",3],["usize",15],["context",3]],[["poll",4],["result",4]]]],[10,"poll_commit","","Attempt to commit the first <code>count</code> elements in the …",2,[[["pin",3],["usize",15],["context",3]],[["poll",4],["result",4]]]],[11,"reserve","","Create a future that reserves at least <code>count</code> elements in …",2,[[["usize",15]],["reserve",3]]],[11,"commit","","Create a future that commits the first <code>count</code> elements in …",2,[[["usize",15]],["commit",3]]],[11,"blocking_reserve","","Reserve at least <code>count</code> elements in the writable buffer, …",2,[[["usize",15]],[["result",4],["error",4]]]],[11,"blocking_commit","","Commit the first <code>count</code> elements in the writable buffer to …",2,[[["usize",15]],[["result",4],["error",4]]]],[8,"Source","","Interface for asynchronous contiguous-memory sources.",null,null],[16,"Item","","The type to be read.",3,null],[10,"source","","The buffer for reading data.",3,[[]]],[10,"poll_request","","Attempt to read at least <code>count</code> elements into the buffer.",3,[[["pin",3],["usize",15],["context",3]],[["poll",4],["result",4]]]],[10,"poll_consume","","Attempt to advance past the first <code>count</code> elements in the …",3,[[["pin",3],["usize",15],["context",3]],[["poll",4],["result",4]]]],[11,"request","","Create a future that reads at least <code>count</code> elements into …",3,[[["usize",15]],["request",3]]],[11,"consume","","Create a future that advances past the first <code>count</code> …",3,[[["usize",15]],["consume",3]]],[11,"blocking_request","","Reads at least <code>count</code> elements into the buffer, blocking …",3,[[["usize",15]],[["result",4],["error",4]]]],[11,"blocking_consume","","Advances past the first <code>count</code> elements in the buffer, …",3,[[["usize",15]],[["result",4],["error",4]]]],[8,"SourceMut","","Interface for asynchronous contiguous-memory mutable …",null,null],[10,"source_mut","","The mutable buffer for reading data.",4,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"into_future","","",5,[[]]],[11,"try_poll","","",5,[[["pin",3],["context",3]],["poll",4]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"into_future","","",6,[[]]],[11,"try_poll","","",6,[[["pin",3],["context",3]],["poll",4]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"into_future","","",7,[[]]],[11,"try_poll","","",7,[[["pin",3],["context",3]],["poll",4]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"into_future","","",8,[[]]],[11,"try_poll","","",8,[[["pin",3],["context",3]],["poll",4]]],[11,"from","rivulet::buffer::circular_buffer::spmc","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","rivulet::buffer::circular_buffer::spsc","",11,[[]]],[11,"into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","rivulet::io","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"sink","rivulet::buffer::circular_buffer::spmc","",9,[[]]],[11,"poll_reserve","","",9,[[["pin",3],["usize",15],["context",3]],[["poll",4],["result",4]]]],[11,"poll_commit","","",9,[[["pin",3],["usize",15],["context",3]],[["poll",4],["result",4]]]],[11,"sink","rivulet::buffer::circular_buffer::spsc","",11,[[]]],[11,"poll_reserve","","",11,[[["pin",3],["usize",15],["context",3]],[["poll",4],["result",4]]]],[11,"poll_commit","","",11,[[["pin",3],["usize",15],["context",3]],[["poll",4],["result",4]]]],[11,"source","rivulet::buffer::circular_buffer::spmc","",10,[[]]],[11,"poll_request","","",10,[[["pin",3],["usize",15],["context",3]],[["poll",4],["result",4]]]],[11,"poll_consume","","",10,[[["pin",3],["usize",15],["context",3]],[["poll",4],["result",4]]]],[11,"source","rivulet::buffer::circular_buffer::spsc","",12,[[]]],[11,"poll_request","","",12,[[["pin",3],["usize",15],["context",3]],[["poll",4],["result",4]]]],[11,"poll_consume","","",12,[[["pin",3],["usize",15],["context",3]],[["poll",4],["result",4]]]],[11,"source","rivulet::io","",0,[[]]],[11,"poll_request","","",0,[[["pin",3],["usize",15],["context",3]],[["result",4],["poll",4]]]],[11,"poll_consume","","",0,[[["pin",3],["usize",15],["context",3]],[["result",4],["poll",4]]]],[11,"source_mut","rivulet::buffer::circular_buffer::spsc","",12,[[]]],[11,"from","rivulet","",1,[[["error",3]]]],[11,"clone","rivulet::buffer::circular_buffer::spmc","",10,[[],["buffersource",3]]],[11,"clone","rivulet::io","",0,[[],["reader",3]]],[11,"default","","",0,[[],["reader",3]]],[11,"cmp","","",0,[[["reader",3]],["ordering",4]]],[11,"eq","","",0,[[["reader",3]],["bool",15]]],[11,"ne","","",0,[[["reader",3]],["bool",15]]],[11,"partial_cmp","","",0,[[["reader",3]],[["option",4],["ordering",4]]]],[11,"lt","","",0,[[["reader",3]],["bool",15]]],[11,"le","","",0,[[["reader",3]],["bool",15]]],[11,"gt","","",0,[[["reader",3]],["bool",15]]],[11,"ge","","",0,[[["reader",3]],["bool",15]]],[11,"fmt","rivulet","",1,[[["formatter",3]],["result",6]]],[11,"fmt","rivulet::io","",0,[[["formatter",3]],["result",6]]],[11,"fmt","rivulet","",1,[[["formatter",3]],[["error",3],["result",4]]]],[11,"hash","rivulet::io","",0,[[]]],[11,"source","rivulet","",1,[[],[["error",8],["option",4]]]],[11,"read","rivulet::io","",0,[[],[["usize",15],["result",6]]]],[11,"poll","rivulet","",5,[[["pin",3],["context",3]],["poll",4]]],[11,"poll","","",6,[[["pin",3],["context",3]],["poll",4]]],[11,"poll","","",7,[[["pin",3],["context",3]],["poll",4]]],[11,"poll","","",8,[[["pin",3],["context",3]],["poll",4]]],[11,"reserve","","Create a future that reserves at least <code>count</code> elements in …",2,[[["usize",15]],["reserve",3]]],[11,"commit","","Create a future that commits the first <code>count</code> elements in …",2,[[["usize",15]],["commit",3]]],[11,"blocking_reserve","","Reserve at least <code>count</code> elements in the writable buffer, …",2,[[["usize",15]],[["result",4],["error",4]]]],[11,"blocking_commit","","Commit the first <code>count</code> elements in the writable buffer to …",2,[[["usize",15]],[["result",4],["error",4]]]],[11,"request","","Create a future that reads at least <code>count</code> elements into …",3,[[["usize",15]],["request",3]]],[11,"consume","","Create a future that advances past the first <code>count</code> …",3,[[["usize",15]],["consume",3]]],[11,"blocking_request","","Reads at least <code>count</code> elements into the buffer, blocking …",3,[[["usize",15]],[["result",4],["error",4]]]],[11,"blocking_consume","","Advances past the first <code>count</code> elements in the buffer, …",3,[[["usize",15]],[["result",4],["error",4]]]]],"p":[[3,"Reader"],[4,"Error"],[8,"Sink"],[8,"Source"],[8,"SourceMut"],[3,"Reserve"],[3,"Commit"],[3,"Request"],[3,"Consume"],[3,"BufferSink"],[3,"BufferSource"],[3,"BufferSink"],[3,"BufferSource"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);