var searchIndex = JSON.parse('{\
"rivulet":{"doc":"Rivulet is a library for creating asynchronous pipelines …","t":"CCCACAAAAAADDLLLLFLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDQDQDIIIIDLLLLLLLLLLKLLLLLLLLLLLLLLLKLLLLLLLKLLKLLLLLLLLLLLLLLLKLLLLKLLLQDQDIILLLLLLLLLLLLLLLLLLKLKLLLLLLLLLKLKL","n":["SplittableView","View","ViewMut","circular_buffer","circular_buffer","error","io","lazy","slice","splittable","view","Sink","Source","borrow","borrow","borrow_mut","borrow_mut","circular_buffer","compare_set_head","drop","drop","from","from","into","into","poll_available","poll_grant","release","set_head","set_reader_waker","try_from","try_from","try_into","try_into","type_id","type_id","view","view","view_mut","view_mut","GrantOverflow","borrow","borrow_mut","clone","clone_into","fmt","fmt","from","into","source","to_owned","to_string","try_from","try_into","type_id","AsyncReader","AsyncWriter","Reader","Writer","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","consume","consume","fill_buf","flush","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","into","into_inner","into_inner","into_inner","into_inner","new","new","new","new","poll_close","poll_fill_buf","poll_flush","poll_read","poll_write","read","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","write","Lazy","LazyChannelSink","LazyChannelSource","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","fmt","from","from","from","hash","into","into","into","into_inner","lazy_channel","new","new_boxed","poll_grant","poll_grant","poll_grant","release","release","release","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","view","view","view","view_mut","view_mut","view_mut","Slice","SliceMut","borrow","borrow","borrow_mut","borrow_mut","compare_set_head","compare_set_head","from","from","into","into","into_inner","into_inner","new","new","poll_available","poll_available","set_head","set_head","set_reader_waker","set_reader_waker","try_from","try_from","try_into","try_into","type_id","type_id","view","view","view_mut","Cloneable","Error","First","Item","Second","SplittableView","SplittableViewImpl","SplittableViewImplMut","SplittableViewMut","View","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","compare_set_head","compare_set_head","compare_set_head","drop","drop","drop","from","from","from","from","into","into","into","into","into_cloneable_view","into_view","poll_available","poll_available","poll_available","poll_grant","poll_grant","release","release","sequence","set_head","set_head","set_head","set_reader_waker","set_reader_waker","set_reader_waker","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","view","view","view","view","view","view_mut","view_mut","view_mut","view_mut","Error","Grant","Item","MapError","View","ViewMut","blocking_grant","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","fmt","from","from","grant","hash","into","into","into_future","into_inner","map_error","poll","poll_grant","poll_grant","release","release","to_owned","try_from","try_from","try_into","try_into","try_poll","type_id","type_id","view","view","view_mut","view_mut"],"q":[[0,"rivulet"],[11,"rivulet::circular_buffer"],[40,"rivulet::error"],[55,"rivulet::io"],[122,"rivulet::lazy"],[167,"rivulet::slice"],[198,"rivulet::splittable"],[270,"rivulet::view"],[310,"core::marker"],[311,"core::marker"],[312,"core::pin"],[313,"core::task::wake"],[314,"core::result"],[315,"core::task::poll"],[316,"core::ops::function"],[317,"core::any"],[318,"core::fmt"],[319,"core::fmt"],[320,"core::option"],[321,"alloc::string"],[322,"core::clone"],[323,"std::io::error"],[324,"core::fmt"],[325,"core::hash"],[326,"core::marker"]],"d":["","","","An asynchronous copy-free circular buffer.","","Errors produced by streams.","Utilities for working with <code>std::io</code>.","Lazy-initialized streams.","Utilities for working with slices.","Streams that can be split into multiple views.","Views into asynchronous streams.","The writer of a circular buffer.","The reader of a circular buffer.","","","","","Create a circular buffer that can hold at least <code>min_size</code> …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Error produced when a request is too large to grant.","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Implements <code>futures::io::AsyncRead</code> for a <code>View</code>.","Implements <code>futures::io::AsyncWrite</code> for a <code>ViewMut</code>.","Implements <code>std::io::Read</code> for a <code>View</code>.","Implements <code>std::io::Write</code> for a <code>ViewMut</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return the original <code>View</code>","Return the original <code>View</code>","Return the original <code>ViewMut</code>","Return the original <code>ViewMut</code>","Create a new <code>Reader</code>","Create a new <code>AsyncReader</code>","Create a new <code>Writer</code>","Create a new <code>AsyncWriter</code>","","","","","","","","","","","","","","","","","","","","","","","","A lazy-initialized view.","A sink created by <code>lazy_channel</code>.","A source created by <code>lazy_channel</code>.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return the inner type, if it has been initialized.","Create a lazy-initialized channel.","Create a new lazy view.","Create a new lazy view with a boxed initialization …","","","","","","","","","","","","","","","","","","","","","","","Treats a slice as a stream.","Treats a mutable slice as a stream.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return the original slice.","Return the original slice.","Create a stream from a slice.","Create a stream from a slice.","","","","","","","","","","","","","","","","A view returned by <code>SplittableView::into_cloneable_view</code>.","The error produced by <code>poll_available</code>.","The first <code>SplittableView</code> produced by <code>sequence</code>.","The streamed type.","The second <code>SplittableView</code> produced by <code>sequence</code>.","A view that can be split for use with multiple readers.","The implementation behind <code>SplittableView</code>.","The implementation behind <code>SplittableViewMut</code>.","A mutable view that can be split for use with multiple …","A view returned by <code>SplittableView::into_view</code>.","","","","","","","","","","","Set the earliest position retained in the stream.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a view that implements <code>Clone</code>.","Create a view for a single reader.","Suspends the current task until <code>len</code> samples starting at …","","","","","","","Split this view into two sequential views, such that data …","Set the earliest position retained in the stream.","","","Set the reader waking function.","","","","","","","","","","","","","","","","Obtain a view into the stream.","","","","","Obtain a mutable view into the stream.","","","","The error produced by <code>poll_grant</code>.","Future produced by <code>View::grant</code>.","The streamed type.","An error-mapped view produced by <code>View::map_error</code>.","Obtain views into asynchronous contiguous-memory streams.","Obtain mutable views into asynchronous contiguous-memory …","Obtains a view of at least <code>count</code> elements, blocking the …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Create a future that obtains a view of at least <code>count</code> …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Return the original view.","Maps this view to a new view producing error <code>E</code>.","","Attempt to obtain a view of at least <code>count</code> elements.","","Attempt to advance past the first <code>count</code> elements in the …","","","","","","","","","","Obtain the current view of the stream.","","Obtain the current mutable view of the stream.",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,2,3,0,3,2,3,2,3,2,3,3,2,2,3,3,2,3,2,3,2,3,2,3,2,3,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,0,0,0,23,26,27,29,23,26,27,29,23,26,27,29,23,26,27,29,23,26,23,27,23,26,27,29,23,26,27,29,23,26,27,29,23,26,27,29,23,26,27,29,29,26,29,26,29,23,23,26,27,29,23,26,27,29,23,26,27,29,23,26,27,29,27,0,0,0,33,36,37,33,36,37,33,33,33,33,36,37,33,33,36,37,33,0,33,33,33,36,37,33,36,37,33,33,36,37,33,36,37,33,36,37,33,36,37,33,36,37,0,0,40,41,40,41,40,41,40,41,40,41,40,41,40,41,40,41,40,41,40,41,40,41,40,41,40,41,40,41,41,0,51,0,51,0,0,0,0,0,0,46,42,44,45,46,42,44,45,42,42,51,44,45,42,44,45,46,42,44,45,46,42,44,45,43,43,51,44,45,46,42,46,42,43,51,44,45,51,44,45,42,46,42,44,45,46,42,44,45,46,42,44,45,51,46,42,44,45,52,46,44,45,24,0,24,0,0,0,24,50,49,50,49,49,49,49,50,49,24,49,50,49,50,49,24,50,24,49,24,49,49,50,49,50,49,50,50,49,24,49,28,49],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,[[4,[[2,[-1]],[3,[-1]]]]],[5,6,7]],[[[3,[-1]],8],4,[]],[[[2,[-1]]],4,[]],[[[3,[-1]]],4,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[9,[[3,[-1]]]],10,-2,8,1],[[12,[[11,[1]]]]],[],13],[[[9,[[2,[-1]]]],10,1],[[12,[[11,[4,14]]]]],[]],[[[2,[-1]],1],4,[]],[[[3,[-1]],8],4,[]],[[[3,[-1]],-2],4,[],[13,5,6]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,15,[]],[-1,15,[]],[[[2,[-1]]],[[16,[-1]]],[]],[[[3,[-1]],8,1],16,[]],[[[2,[-1]]],[[16,[-1]]],[]],[[[3,[-1]],8,1],16,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[14,14],[[-1,-2],4,[],[]],[[14,17],[[11,[4,18]]]],[[14,17],19],[-1,-1,[]],[-1,-2,[],[]],[14,[[21,[20]]]],[-1,-2,[],[]],[-1,22,[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,15,[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[23,[-1]]],[24,25]],[[[26,[-1]]],[[26,[-1]]],[24,25]],[[[27,[-1]]],[[27,[-1]]],[28,25]],[[[29,[-1]]],[[29,[-1]]],[28,25]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[[23,[-1]],1],4,24],[[[9,[[26,[-1]]]],1],4,24],[[[23,[-1]]],[[31,[[16,[30]]]]],24],[[[27,[-1]]],[[31,[4]]],28],[[[23,[-1]],17],19,[24,32]],[[[26,[-1]],17],19,[24,32]],[[[27,[-1]],17],19,[28,32]],[[[29,[-1]],17],19,[28,32]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],-1,24],[[[26,[-1]]],-1,24],[[[27,[-1]]],-1,28],[[[29,[-1]]],-1,28],[-1,[[23,[-1]]],24],[-1,[[26,[-1]]],24],[-1,[[27,[-1]]],28],[-1,[[29,[-1]]],28],[[[9,[[29,[-1]]]],10],[[12,[[31,[4]]]]],28],[[[9,[[26,[-1]]]],10],[[12,[[31,[[16,[30]]]]]]],24],[[[9,[[29,[-1]]]],10],[[12,[[31,[4]]]]],28],[[[9,[[26,[-1]]]],10,[16,[30]]],[[12,[[31,[1]]]]],24],[[[9,[[29,[-1]]]],10,[16,[30]]],[[12,[[31,[1]]]]],28],[[[23,[-1]],[16,[30]]],[[31,[1]]],24],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[[[27,[-1]],[16,[30]]],[[31,[1]]],28],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[33,[-1,-2]]],[[33,[-1,-2]]],25,25],[[-1,-2],4,[],[]],[[[33,[-1,-2]],17],19,32,32],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[33,[-1,-2]],-3],4,34,34,35],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[33,[-1,-2]]],[[21,[-1]]],[],[]],[-1,[[4,[[36,[-2,-3,-1]],[37,[-2,-3,-1]]]]],38,[],[]],[-1,[[33,[-2,-1]]],[],[]],[-1,[[33,[-2,[39,[38]]]]],38,[]],[[[9,[[33,[-1,-2]]]],10,1],[[12,[[11,[4]]]]],24,38],[[[9,[[36,[-1,-2,-3]]]],10,1],[[12,[[11,[4]]]]],24,[],38],[[[9,[[37,[-1,-2,-3]]]],10,1],[[12,[[11,[4]]]]],[],24,38],[[[33,[-1,-2]],1],4,24,38],[[[36,[-1,-2,-3]],1],4,24,[],38],[[[37,[-1,-2,-3]],1],4,[],24,38],[-1,-2,[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[[[33,[-1,-2]]],16,24,38],[[[36,[-1,-2,-3]]],16,24,[],38],[[[37,[-1,-2,-3]]],16,[],24,38],[[[33,[-1,-2]]],16,28,38],[[[36,[-1,-2,-3]]],16,28,[],38],[[[37,[-1,-2,-3]]],16,[],28,38],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[40,[-1]],8],4,[]],[[[41,[-1]],8],4,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[40,[-1]]],[[16,[-1]]],[]],[[[41,[-1]]],[[16,[-1]]],[]],[[[16,[-1]]],[[40,[-1]]],[]],[[[16,[-1]]],[[41,[-1]]],[]],[[[9,[[40,[-1]]]],10,-2,8,1],[[12,[[11,[1]]]]],[],38],[[[9,[[41,[-1]]]],10,-2,8,1],[[12,[[11,[1]]]]],[],38],[[[40,[-1]],8],4,[]],[[[41,[-1]],8],4,[]],[[[40,[-1]],-2],4,[],[13,5,6]],[[[41,[-1]],-2],4,[],[13,5,6]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,15,[]],[-1,15,[]],[[[40,[-1]],8,1],16,[]],[[[41,[-1]],8,1],16,[]],[[[41,[-1]],8,1],16,[]],0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[42,[-1]]],[[42,[-1]]],43],[[-1,-2],4,[],[]],[[-1,8],4,[]],[[[44,[-1]],8],4,43],[[[45,[-1]],8],4,43],[[[42,[-1]]],4,43],[[[44,[-1]]],4,43],[[[45,[-1]]],4,43],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[42,[-1]]],[]],[-1,[[46,[-1]]],[]],[[[9,[-1]],10,-2,8,1],[[12,[[11,[1]]]]],[],13],[[[9,[[44,[-1]]]],10,-2,8,1],[[12,[[11,[1]]]]],43,13],[[[9,[[45,[-1]]]],10,-2,8,1],[[12,[[11,[1]]]]],43,13],[[[9,[[46,[-1]]]],10,1],[[12,[[11,[4]]]]],43],[[[9,[[42,[-1]]]],10,1],[[12,[[11,[4]]]]],43],[[[46,[-1]],1],4,43],[[[42,[-1]],1],4,43],[-1,[[4,[[44,[-1]],[45,[-1]]]]],[]],[[-1,8],4,[]],[[[44,[-1]],8],4,43],[[[45,[-1]],8],4,43],[[-1,-2],4,[],[13,5,6]],[[[44,[-1]],-2],4,43,[13,5,6]],[[[45,[-1]],-2],4,43,[13,5,6]],[-1,-2,[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[[-1,8,1],16,[]],[[[46,[-1]]],16,43],[[[42,[-1]]],16,43],[[[44,[-1]],8,1],16,43],[[[45,[-1]],8,1],16,43],[[-1,8,1],16,[]],[[[46,[-1]]],16,47],[[[44,[-1]],8,1],16,47],[[[45,[-1]],8,1],16,47],0,0,0,0,0,0,[[-1,1],[[11,[4]]],48],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[49,[-1,-2,-3]]],[[49,[-1,-2,-3]]],25,[],25],[[-1,-2],4,[],[]],[[[49,[-1,-2,-3]],17],19,32,32,32],[-1,-1,[]],[-1,-1,[]],[[-1,1],[[50,[-1]]],48],[[[49,[-1,-2,-3]],-4],4,34,[],34,35],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[[[49,[-1,-2,-3]]],-1,[],[],[]],[[-1,-2],[[49,[-1,-3,-2]]],48,13,[]],[[[9,[[50,[-1]]]],10],12,24],[[[9,[-1]],10,1],[[12,[[11,[4]]]]],[]],[[[9,[[49,[-1,-2,-3]]]],10,1],[[12,[[11,[4]]]]],24,32,13],[[-1,1],4,[]],[[[49,[-1,-2,-3]],1],4,24,32,13],[-1,-2,[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[[[9,[-1]],10],12,[]],[-1,15,[]],[-1,15,[]],[-1,16,[]],[[[49,[-1,-2,-3]]],16,24,32,13],[-1,16,[]],[[[49,[-1,-2,-3]]],16,28,32,13]],"c":[],"p":[[15,"usize"],[3,"Sink",11],[3,"Source",11],[15,"tuple"],[8,"Send",310],[8,"Sync",310],[8,"Default",311],[15,"u64"],[3,"Pin",312],[3,"Context",313],[4,"Result",314],[4,"Poll",315],[8,"Fn",316],[3,"GrantOverflow",40],[3,"TypeId",317],[15,"slice"],[3,"Formatter",318],[3,"Error",318],[6,"Result",318],[8,"Error",319],[4,"Option",320],[3,"String",321],[3,"Reader",55],[8,"View",270],[8,"Clone",322],[3,"AsyncReader",55],[3,"Writer",55],[8,"ViewMut",270],[3,"AsyncWriter",55],[15,"u8"],[6,"Result",323],[8,"Debug",318],[3,"Lazy",122],[8,"Hash",324],[8,"Hasher",324],[3,"LazyChannelSink",122],[3,"LazyChannelSource",122],[8,"FnOnce",316],[3,"Box",325],[3,"Slice",167],[3,"SliceMut",167],[3,"Cloneable",198],[8,"SplittableView",198],[3,"First",198],[3,"Second",198],[3,"View",198],[8,"SplittableViewMut",198],[8,"Sized",310],[3,"MapError",270],[3,"Grant",270],[8,"SplittableViewImpl",198],[8,"SplittableViewImplMut",198]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
