var searchIndex = JSON.parse('{\
"rivulet":{"doc":"Rivulet provides tools for creating and processing …","t":[16,3,16,3,8,8,8,8,11,11,11,11,11,11,0,11,11,0,11,11,11,11,11,11,11,11,11,11,0,0,11,11,11,10,11,10,11,0,11,11,11,11,11,11,11,11,10,11,10,11,0,0,3,3,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Error","Grant","Item","MapError","Sink","Source","View","ViewMut","blocking_grant","blocking_grant","borrow","borrow","borrow_mut","borrow_mut","circular_buffer","clone","clone_into","error","fmt","from","from","grant","grant","hash","into","into","into_future","into_inner","io","lazy","map_error","map_error","poll","poll_grant","poll_grant","release","release","slice","to_owned","try_from","try_from","try_into","try_into","try_poll","type_id","type_id","view","view","view_mut","view_mut","spmc","spsc","Sink","Source","borrow","borrow","borrow_mut","borrow_mut","buffer","clone","clone_into","from","from","into","into","poll_grant","poll_grant","release","release","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","view","view","view_mut","Sink","Source","borrow","borrow","borrow_mut","borrow_mut","buffer","from","from","into","into","poll_grant","poll_grant","release","release","try_from","try_from","try_into","try_into","type_id","type_id","view","view","view_mut","view_mut","0","GrantOverflow","borrow","borrow_mut","clone","clone_into","fmt","fmt","from","into","source","to_owned","to_string","try_from","try_into","type_id","AsyncReader","AsyncWriter","Reader","Writer","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","consume","consume","fill_buf","flush","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","into","into_inner","into_inner","into_inner","into_inner","new","new","new","new","poll_close","poll_fill_buf","poll_flush","poll_read","poll_write","read","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","write","Lazy","LazyChannelSink","LazyChannelSource","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","fmt","from","from","from","hash","into","into","into","into_inner","lazy_channel","new","new_boxed","poll_grant","poll_grant","poll_grant","release","release","release","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","view","view","view","view_mut","view_mut","view_mut","Slice","borrow","borrow_mut","from","into","into_inner","new","poll_grant","release","try_from","try_into","type_id","view","view_mut"],"q":["rivulet","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rivulet::circular_buffer","","rivulet::circular_buffer::spmc","","","","","","","","","","","","","","","","","","","","","","","","","","","rivulet::circular_buffer::spsc","","","","","","","","","","","","","","","","","","","","","","","","","rivulet::error","","","","","","","","","","","","","","","","rivulet::io","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rivulet::lazy","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rivulet::slice","","","","","","","","","","","","",""],"d":["The error produced by <code>poll_grant</code>.","Future produced by <code>View::grant</code>.","The streamed type.","An error-mapped view produced by <code>View::map_error</code>.","A marker trait that indicates this view is a sink of data.","A marker trait that indicates this view is a source of …","Obtain views into asynchronous contiguous-memory streams.","Obtain mutable views into asynchronous contiguous-memory …","Obtains a view of at least <code>count</code> elements, blocking the …","Obtains a view of at least <code>count</code> elements, blocking the …","","","","","Asynchronous circular buffers.","","","Errors produced by streams.","","","","Create a future that obtains a view of at least <code>count</code> …","Create a future that obtains a view of at least <code>count</code> …","","","","","Return the original view.","Utilities for working with <code>std::io</code>.","Lazy-initialized streams.","Maps this view to a new view producing error <code>E</code>.","Maps this view to a new view producing error <code>E</code>.","","Attempt to obtain a view of at least <code>count</code> elements.","","Attempt to advance past the first <code>count</code> elements in the …","","Utilities for working with slices.","","","","","","","","","Obtain the current view of the stream.","","Obtain the current mutable view of the stream.","","A single-producer, multiple-consumer async circular …","A single-producer, single-consumer async circular buffer.","Write values to the associated <code>Source</code>s.","Read values from the associated <code>Sink</code>.","","","","","Creates a single-producer, multiple-consumer async …","","","","","","","","","","","","","","","","","","","","","Write values to the associated <code>Source</code>.","Read values from the associated <code>Sink</code>.","","","","","Creates a single-producer, single-consumer async circular …","","","","","","","","","","","","","","","","","","","","Error produced when a request is too large to grant.","","","","","","","","","","","","","","","Implements <code>futures::io::AsyncRead</code> for a source.","Implements <code>futures::io::AsyncWrite</code> for a sink.","Implements <code>std::io::Read</code> for a source.","Implements <code>std::io::Write</code> for a sink.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return the original <code>Source</code>","Return the original <code>Source</code>","Return the original <code>Sink</code>","Return the original <code>Sink</code>","Create a new <code>Reader</code>","Create a new <code>AsyncReader</code>","Create a new <code>Writer</code>","Create a new <code>AsyncWriter</code>","","","","","","","","","","","","","","","","","","","","","","","","A lazy-initialized view.","A sink created by <code>lazy_channel</code>.","A source created by <code>lazy_channel</code>.","","","","","","","","","","","","","","","","","Return the inner type, if it has been initialized.","Create a lazy-initialized channel.","Create a new lazy view.","Create a new lazy view with a boxed initialization …","","","","","","","","","","","","","","","","","","","","","","","Implements all of the stream traits on slices or …","","","","","Return the original type.","Create a stream from a slice or slice-referenceable type.","","","","","","",""],"i":[1,0,1,0,0,0,0,0,1,1,2,3,2,3,0,3,3,0,3,2,3,1,1,3,2,3,2,3,0,0,1,1,2,1,3,1,3,0,3,2,3,2,3,2,2,3,1,3,4,3,0,0,0,0,5,6,5,6,0,6,6,5,6,5,6,5,6,5,6,6,5,6,5,6,5,6,5,6,5,0,0,7,8,7,8,0,7,8,7,8,7,8,7,8,7,8,7,8,7,8,7,8,7,8,9,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0,0,0,10,11,12,13,10,11,12,13,10,11,12,13,10,11,12,13,10,11,10,12,10,11,12,13,10,11,12,13,10,11,12,13,10,11,12,13,10,11,12,13,13,11,13,11,13,10,10,11,12,13,10,11,12,13,10,11,12,13,10,11,12,13,12,0,0,0,14,15,16,14,15,16,14,14,14,14,15,16,14,14,15,16,14,0,14,14,14,15,16,14,15,16,14,14,15,16,14,15,16,14,15,16,14,15,16,14,15,16,0,17,17,17,17,17,17,17,17,17,17,17,17,17],"f":[null,null,null,null,null,null,null,null,[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[]],[[]],[[]],[[]],null,[[]],[[]],null,[[["formatter",3]],["result",6]],[[]],[[]],[[["usize",15]],["grant",3]],[[["usize",15]],["grant",3]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["maperror",3]],[[],["maperror",3]],[[["pin",3],["context",3]],["poll",4]],[[["pin",3],["usize",15],["context",3]],[["result",4],["poll",4,["result"]]]],[[["pin",3],["usize",15],["context",3]],[["result",4],["poll",4,["result"]]]],[[["usize",15]]],[[["usize",15]]],null,[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["context",3],["pin",3]],["poll",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],null,null,null,null,[[]],[[]],[[]],[[]],[[["usize",15]]],[[],["source",3]],[[]],[[]],[[]],[[]],[[]],[[["pin",3],["usize",15],["context",3]],[["result",4,["grantoverflow"]],["poll",4,["result"]]]],[[["pin",3],["usize",15],["context",3]],[["result",4,["grantoverflow"]],["poll",4,["result"]]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[["pin",3],["usize",15],["context",3]],[["result",4,["grantoverflow"]],["poll",4,["result"]]]],[[["pin",3],["usize",15],["context",3]],[["result",4,["grantoverflow"]],["poll",4,["result"]]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[],["grantoverflow",3]],[[]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],["result",6]],[[]],[[]],[[],[["option",4,["error"]],["error",8]]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["reader",3]],[[],["asyncreader",3]],[[],["writer",3]],[[],["asyncwriter",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["pin",3],["usize",15]]],[[],["result",6]],[[],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["pin",3],["context",3]],[["result",6],["poll",4,["result"]]]],[[["pin",3],["context",3]],[["result",6],["poll",4,["result"]]]],[[["pin",3],["context",3]],[["result",6],["poll",4,["result"]]]],[[["pin",3],["context",3]],[["poll",4,["result"]],["result",6,["usize"]]]],[[["pin",3],["context",3]],[["poll",4,["result"]],["result",6,["usize"]]]],[[],[["usize",15],["result",6,["usize"]]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],[["usize",15],["result",6,["usize"]]]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["lazy",3]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[]],[[]],[[]],[[["pin",3],["usize",15],["context",3]],[["result",4],["poll",4,["result"]]]],[[["pin",3],["usize",15],["context",3]],[["result",4],["poll",4,["result"]]]],[[["pin",3],["usize",15],["context",3]],[["result",4],["poll",4,["result"]]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[["pin",3],["usize",15],["context",3]],[["result",4],["poll",4,["result"]]]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]]],"p":[[8,"View"],[3,"Grant"],[3,"MapError"],[8,"ViewMut"],[3,"Sink"],[3,"Source"],[3,"Sink"],[3,"Source"],[3,"GrantOverflow"],[3,"Reader"],[3,"AsyncReader"],[3,"Writer"],[3,"AsyncWriter"],[3,"Lazy"],[3,"LazyChannelSink"],[3,"LazyChannelSource"],[3,"Slice"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};