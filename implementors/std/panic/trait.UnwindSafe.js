(function() {var implementors = {};
implementors["rivulet"] = [{"text":"impl !<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"enum\" href=\"rivulet/enum.Error.html\" title=\"enum rivulet::Error\">Error</a>","synthetic":true,"types":["rivulet::base::Error"]},{"text":"impl&lt;'a, T&gt; !<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"rivulet/struct.Reserve.html\" title=\"struct rivulet::Reserve\">Reserve</a>&lt;'a, T&gt;","synthetic":true,"types":["rivulet::base::Reserve"]},{"text":"impl&lt;'a, T&gt; !<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"rivulet/struct.Commit.html\" title=\"struct rivulet::Commit\">Commit</a>&lt;'a, T&gt;","synthetic":true,"types":["rivulet::base::Commit"]},{"text":"impl&lt;'a, T&gt; !<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"rivulet/struct.Request.html\" title=\"struct rivulet::Request\">Request</a>&lt;'a, T&gt;","synthetic":true,"types":["rivulet::base::Request"]},{"text":"impl&lt;'a, T&gt; !<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"rivulet/struct.Consume.html\" title=\"struct rivulet::Consume\">Consume</a>&lt;'a, T&gt;","synthetic":true,"types":["rivulet::base::Consume"]},{"text":"impl&lt;T&gt; !<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"rivulet/buffer/circular_buffer/spmc/struct.BufferSink.html\" title=\"struct rivulet::buffer::circular_buffer::spmc::BufferSink\">BufferSink</a>&lt;T&gt;","synthetic":true,"types":["rivulet::buffer::circular_buffer::spmc::BufferSink"]},{"text":"impl&lt;T&gt; !<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"rivulet/buffer/circular_buffer/spmc/struct.BufferSource.html\" title=\"struct rivulet::buffer::circular_buffer::spmc::BufferSource\">BufferSource</a>&lt;T&gt;","synthetic":true,"types":["rivulet::buffer::circular_buffer::spmc::BufferSource"]},{"text":"impl&lt;T&gt; !<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"rivulet/buffer/circular_buffer/spsc/struct.BufferSink.html\" title=\"struct rivulet::buffer::circular_buffer::spsc::BufferSink\">BufferSink</a>&lt;T&gt;","synthetic":true,"types":["rivulet::buffer::circular_buffer::spsc::BufferSink"]},{"text":"impl&lt;T&gt; !<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"rivulet/buffer/circular_buffer/spsc/struct.BufferSource.html\" title=\"struct rivulet::buffer::circular_buffer::spsc::BufferSource\">BufferSource</a>&lt;T&gt;","synthetic":true,"types":["rivulet::buffer::circular_buffer::spsc::BufferSource"]},{"text":"impl&lt;S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"rivulet/io/struct.Reader.html\" title=\"struct rivulet::io::Reader\">Reader</a>&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a>,&nbsp;</span>","synthetic":true,"types":["rivulet::io::Reader"]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()